#+TITLE:Computational Chemistry Laboratory II (CBE 60547)
#+AUTHOR: Prateek Mehta, William F. Schneider
#+DATE:09-20-2019
#+LATEX_CLASS: article
#+OPTIONS: ^:{} # make super/subscripts only when wrapped in {}
#+OPTIONS: toc:nil # suppress toc, so we can put it where we want
#+OPTIONS: tex:t
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_HEADER: \usepackage[left=1in, right=1in, top=1in, bottom=1in, nohead]{geometry} 
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \usepackage[labelfont=bf]{caption}
#+LATEX_HEADER: \usepackage{amsmath}
m#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \usepackage[parfill]{parskip}

\maketitle

* Electronic Structure Calculations using =GAMESS= and =Avogadro=

In this lab session we will learn how to run and visualize the results of electronic structure calculations utilizing the GAMESS and Avogadro software on the CRC machines.

** Logging In With FastX
Go to [[https://crcfe01.crc.nd.edu]] and log in using your ND credentials.  Then
choose a single xterm session to get started.  Alternatively, download [[https://www.starnet.com/fastx/current-client][fastX]] software.

** Loading the required modules

- The shell command ~module avail~ shows a list of software installed on the CRC machines which you can load and use

#+BEGIN_SRC sh
module avail
#+END_SRC


- The modules we will need to load are ~avogadro~, ~gamess~, and ~openbabel~.

#+BEGIN_SRC sh
module load avogadro
module load gamess
module load openbabel
#+END_SRC

** Avogadro

- To launch avogadro type

#+BEGIN_SRC sh
avogadro &
#+END_SRC

#+RESULTS:

- We are going to set up and run a calculation for N_{2}

- In the draw settings section select nitrogen from the element drop down menu

- Uncheck adjust hydrogens (this will put hydrogens on your atom and construct NH_{3})

- Clicking in the view window will create a nitrogen atom

- Place two nitrogen atoms next to each other to make a N_{2} molecule

- Hovering over any of the icons in the top bar will display a description of that option.

- The click to measure tool will allow you to measure distances (select two atoms) and angles (select 3 atoms). Select both nitrogens, #1 and #2 will appear on them and the distance will be displayed below

- Click on the manipulation tool (the hand with a finger pointing)

- Click and drag one of the nitrogens until the bond length is 1.1 \AA\ (later we will learn methods for optimizing geometry, but for right now we will set it based on the experimental distance http://cccbdb.nist.gov/exp2.asp?casno=7727379)

** Webmo
Webmo is a web-based molecule editor and viewer that works pretty darn well with games.  It is accessible at [[http://webmo.net]].  Log in as a guest.  You can draw molecules, construct Gamess input, and analyze Gamess output.
** =GAMESS=

*** Creating Input files

- We are ready to generate our input file now. From the extensions menu select =GAMESS= and click on =Input Generator=

- A window will pop-up. The setup for this calculation right now is a single point energy calculation, the method is restricted Hartree-Fock, with the STO-3G basis. In the lower right click generate

- Name your input file and save it in a new folder

- Alternately, you could also have typed in the input file by hand 

*** Running calculations

- Go back to the terminal cd into the directory where you saved the input file

- The command below will run games on your input file and generate an output file called =N2.log=

#+BEGIN_SRC sh
rungms N2.inp > N2.log
#+END_SRC

To queue a job, create and save gamess.sh:
#+BEGIN_EXAMPLE
#!/bin/bash
#$ -pe smp 4
#$ -q debug
#$ -N gamess
module load gamess

cat <<EOF > ~/.gmsrc
set SCR=/scratch365/$USER
set USERSCR=$PWD
EOF

rungms $1.inp > $1.out
#+END_EXAMPLE

#+BEGIN_SRC sh
qsub gamess.sh N2
#+END_SRC

#+BEGIN_EXAMPLE
qconf -sql   # list availabe queues
qconf -sq /queuename/   # list details of a queue
#+END_EXAMPLE



*** Analyzing the output

- Open the output file in a text editor, either gedit or emacs. 

#+BEGIN_SRC sh
emacs N2.log &
#+END_SRC

- The structure of the output file is
  - summary of the input
  - initialization messages
  - store 1 and 2 electron integrals
  - SCF calculation details
  - final orbital populations and energies

- Now go back to Avogadro and open the log file

- From here you can view the orbitals and their energies

- You can also measure any angles and bond lengths in the same manner as we did when setting up the input calculation

*** Run a series of jobs
#+BEGIN_SRC sh
#!/bin/bash
#$ -pe smp 4
#$ -q debug
#$ -N gamess
module load gamess

cat <<EOF > ~/.gmsrc
set SCR=/scratch365/$USER
set USERSCR=$PWD
EOF

rm -f dist template summary.dat

cat <<EOF > dist
0.5
0.6
0.7
0.8
0.9
1.0
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
2.0
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3.0
EOF

cat <<'EOF' > template
 $BASIS GBASIS=STO NGAUSS=3 $END
 $CONTRL SCFTYP=RHF RUNTYP=ENERGY ICHARG=1 MULT=1 $END
 $DATA 
Title
C1
H     1.0     0.   0.  0.
He    2.0     0.   0.  XXX
 $END
EOF

for i in  $(cat dist); do
    echo $i
    sed s/XXX/$i/ < template > $i.inp
    echo $i.inp
    rungms $i.inp > $i.out
    ENERGY=$(grep '^ FINAL RHF' $i.out | gawk '{print $5}')
    echo "$i $ENERGY" >> summary.dat
done



#+END_SRC
*** Plot output
#+BEGIN_SRC python :exports results
import matplotlib.pyplot as plt
import numpy as np

H_atom_HF = -0.46658185
He_cation_HF = -1.9317484483
He_atom_HF = -2.80778396
He_atom_LDA = -2.771886

plt.figure()

baseline = He_atom_HF
with open('./Resources/HHe+-HF-STO3G.dat', 'r') as f:
    # Reading all the lines in the file
    # Each line is stored as an element of a list
    lines = f.readlines()
    distance = []
    HF_energy = []

    for line in lines:
        # Each is a string with two columns
        dist, energy = line.split()

        # We need to convert each line to a float add it to our lists
        distance.append(float(dist))
        HF_energy.append(float(energy)-baseline)

plt.plot(distance,HF_energy, label='H-F')

baseline = He_atom_LDA
with open('./Resources/HHe+-LDA-STO3G.dat', 'r') as f:
    # Reading all the lines in the file
    # Each line is stored as an element of a list
    lines = f.readlines()
    distance = []
    LDA_energy = []

    for line in lines:
        # Each is a string with two columns
        dist, energy = line.split()

        # We need to convert each line to a float add it to our lists
        distance.append(float(dist))
        LDA_energy.append(float(energy)-baseline)

plt.plot(distance,LDA_energy,label='LDA')
plt.plot([0.,3.0],[0.,0.],ls='--',color='black')
plt.xlim(0.4,3.)

plt.legend()
plt.xlabel('distance (Angstrom)')
plt.ylabel('Energy (Hartree)')
plt.title('HHe+ Energies vs distance, referenced to H+ and He')
plt.savefig('./Images/HHe+.png')

#+END_SRC
